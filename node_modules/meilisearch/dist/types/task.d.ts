import { Config, Task, WaitOptions, TasksQuery, TasksResults } from './types';
import { HttpRequests } from './http-requests';
declare class TaskClient {
    httpRequest: HttpRequests;
    constructor(config: Config);
    /**
     * Get one task
     *
     * @param  {number} uid - unique identifier of the task
     *
     * @returns { Promise<Task> }
     */
    getTask(uid: number): Promise<Task>;
    /**
     * Get tasks
     *
     * @param  {TasksQuery} [parameters={}] - Parameters to browse the tasks
     *
     * @returns {Promise<TasksResults>} - Promise containing all tasks
     */
    getTasks(parameters?: TasksQuery): Promise<TasksResults>;
    /**
     * Wait for a task to be processed.
     *
     * @param {number} taskUid Task identifier
     * @param {WaitOptions} options Additional configuration options
     *
     * @returns {Promise<Task>} Promise returning a task after it has been processed
     */
    waitForTask(taskUid: number, { timeOutMs, intervalMs }?: WaitOptions): Promise<Task>;
    /**
     * Waits for multiple tasks to be processed
     *
     * @param {number[]} taskUids Tasks identifier list
     * @param {WaitOptions} options Wait options
     *
     * @returns {Promise<Task[]>} Promise returning a list of tasks after they have been processed
     */
    waitForTasks(taskUids: number[], { timeOutMs, intervalMs }?: WaitOptions): Promise<Task[]>;
}
export { TaskClient };
//# sourceMappingURL=task.d.ts.map